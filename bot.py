import logging
import sqlite3
import os
import random
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8338962499:AAF0KswedJ_LjBBexenXuymbozyS7xxiZmQ"
ADMIN_ID = 5818997833  # ‚Üê –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô ID

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
DB_CONNECTION = None


def get_db_connection():
    """–ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    global DB_CONNECTION
    if DB_CONNECTION is None:
        DB_CONNECTION = sqlite3.connect('game.db', check_same_thread=False, timeout=30)
        DB_CONNECTION.execute("PRAGMA journal_mode=WAL")
    return DB_CONNECTION


def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –∏–≥—Ä–æ–∫–æ–≤
    cursor.execute('''
                   CREATE TABLE IF NOT EXISTS players
                   (
                       user_id INTEGER PRIMARY KEY,
                       username TEXT,
                       nickname TEXT,
                       balance INTEGER DEFAULT 5000,
                       last_income_collection TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                   )
                   ''')

    # === –ë–ï–ó–û–ü–ê–°–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–õ–ï–ô ===
    cursor.execute("PRAGMA table_info(players)")
    columns = [col[1] for col in cursor.fetchall()]
    if 'last_box_open' not in columns:
        cursor.execute('ALTER TABLE players ADD COLUMN last_box_open TIMESTAMP')
    if 'referrer_id' not in columns:
        cursor.execute('ALTER TABLE players ADD COLUMN referrer_id INTEGER')

    # –¢–∞–±–ª–∏—Ü–∞ –±–∏–∑–Ω–µ—Å–æ–≤
    cursor.execute('''
                   CREATE TABLE IF NOT EXISTS businesses
                   (
                       id INTEGER PRIMARY KEY AUTOINCREMENT,
                       name TEXT,
                       price INTEGER,
                       income INTEGER,
                       description TEXT
                   )
                   ''')

    # –¢–∞–±–ª–∏—Ü–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤
    cursor.execute('''
                   CREATE TABLE IF NOT EXISTS player_businesses
                   (
                       id INTEGER PRIMARY KEY AUTOINCREMENT,
                       user_id INTEGER,
                       business_id INTEGER,
                       purchased_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                       FOREIGN KEY (user_id) REFERENCES players (user_id),
                       FOREIGN KEY (business_id) REFERENCES businesses (id),
                       UNIQUE (user_id, business_id)
                   )
                   ''')

    # –¢–∞–±–ª–∏—Ü–∞ —è–∏—Ü
    cursor.execute('''
                   CREATE TABLE IF NOT EXISTS eggs
                   (
                       id INTEGER PRIMARY KEY AUTOINCREMENT,
                       name TEXT,
                       price INTEGER,
                       image_file_id TEXT,
                       description TEXT,
                       limit_count INTEGER,
                       current_count INTEGER DEFAULT 0,
                       base_price INTEGER,
                       last_restock TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                   )
                   ''')

    # –¢–∞–±–ª–∏—Ü–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —è–∏—Ü
    cursor.execute('''
                   CREATE TABLE IF NOT EXISTS player_eggs
                   (
                       id INTEGER PRIMARY KEY AUTOINCREMENT,
                       user_id INTEGER,
                       egg_id INTEGER,
                       purchased_price INTEGER,
                       purchased_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                       FOREIGN KEY (user_id) REFERENCES players (user_id),
                       FOREIGN KEY (egg_id) REFERENCES eggs (id)
                   )
                   ''')

    # –¢–∞–±–ª–∏—Ü–∞ –¥—Ä—É–∑–µ–π
    cursor.execute('''
                   CREATE TABLE IF NOT EXISTS friends
                   (
                       id INTEGER PRIMARY KEY AUTOINCREMENT,
                       user_id INTEGER,
                       friend_id INTEGER,
                       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                       UNIQUE (user_id, friend_id)
                   )
                   ''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–µ–π–¥–æ–≤
    cursor.execute('''
                   CREATE TABLE IF NOT EXISTS trades
                   (
                       id INTEGER PRIMARY KEY AUTOINCREMENT,
                       from_user_id INTEGER,
                       to_user_id INTEGER,
                       item_type TEXT,
                       item_id INTEGER,
                       price INTEGER,
                       status TEXT DEFAULT 'pending',
                       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                   )
                   ''')

    # –¢–∞–±–ª–∏—Ü–∞ –±–æ–∫—Å–æ–≤
    cursor.execute('''
                   CREATE TABLE IF NOT EXISTS boxes
                   (
                       id INTEGER PRIMARY KEY AUTOINCREMENT,
                       name TEXT,
                       price INTEGER,
                       rewards TEXT
                   )
                   ''')

    # –¢–∞–±–ª–∏—Ü–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
    cursor.execute('''
                   CREATE TABLE IF NOT EXISTS loans
                   (
                       id INTEGER PRIMARY KEY AUTOINCREMENT,
                       user_id INTEGER,
                       amount INTEGER,
                       interest_rate INTEGER,
                       remaining_amount INTEGER,
                       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                       FOREIGN KEY (user_id) REFERENCES players (user_id)
                   )
                   ''')

    # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–¥–æ–≤
    cursor.execute('''
                   CREATE TABLE IF NOT EXISTS promo_codes
                   (
                       id INTEGER PRIMARY KEY AUTOINCREMENT,
                       code TEXT UNIQUE,
                       reward_type TEXT,
                       reward_value INTEGER,
                       reward_item TEXT,
                       uses_left INTEGER,
                       expires_at TIMESTAMP,
                       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                   )
                   ''')

    # –¢–∞–±–ª–∏—Ü–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
    cursor.execute('''
                   CREATE TABLE IF NOT EXISTS used_codes
                   (
                       id INTEGER PRIMARY KEY AUTOINCREMENT,
                       user_id INTEGER,
                       code_id INTEGER,
                       used_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                       FOREIGN KEY (user_id) REFERENCES players (user_id),
                       FOREIGN KEY (code_id) REFERENCES promo_codes (id),
                       UNIQUE (user_id, code_id)
                   )
                   ''')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    cursor.execute('SELECT COUNT(*) FROM businesses')
    if cursor.fetchone()[0] == 0:
        businesses_data = [
            ("üè™ –õ–∞—Ä—ë–∫ —Å —à–∞—É—Ä–º–æ–π", 5000, 1000, "–ù–µ–±–æ–ª—å—à–æ–π –ª–∞—Ä—ë–∫ –≤ –ø—Ä–æ—Ö–æ–¥–Ω–æ–º –º–µ—Å—Ç–µ"),
            ("‚õΩ –ê–ó–° 42-–π –±–µ–Ω–∑–∏–Ω", 25000, 5000, "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –±–µ–Ω–∑–∏–Ω –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞"),
            ("üè¢ –û—Ñ–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä", 100000, 20000, "–ê–π—Ç–∏—à–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç 24/7"),
            ("üéÆ –ò–≥—Ä–æ–≤–∞—è —Å—Ç—É–¥–∏—è", 500000, 100000, "–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ö–∞–π–ø–æ–≤—ã–µ –∏–≥—Ä—ã"),
            ("üíª IT –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è", 2000000, 400000, "–ü–æ–≥–ª–æ—â–∞–µ–º —Å—Ç–∞—Ä—Ç–∞–ø—ã –∑–∞ YAIC–∏")
        ]
        cursor.executemany('INSERT INTO businesses (name, price, income, description) VALUES (?, ?, ?, ?)',
                           businesses_data)

    cursor.execute('SELECT COUNT(*) FROM eggs')
    if cursor.fetchone()[0] == 0:
        eggs_data = [
            ("ü•ö –û–±—ã—á–Ω–æ–µ —è–π—Ü–æ", 2000, "", "–ë–∞–∑–æ–≤–æ–µ —è–π—Ü–æ —Å —Ö–æ—Ä–æ—à–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º —Ä–æ—Å—Ç–∞. –û—Ç–ª–∏—á–Ω—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–∞!",
             20, 0, 2000),
            ("ü•ö –ó–æ–ª–æ—Ç–æ–µ —è–π—Ü–æ", 8000, "", "–†–µ–¥–∫–æ–µ –∑–æ–ª–æ—Ç–æ–µ —è–π—Ü–æ, –±–ª–µ—Å—Ç–∏—Ç –Ω–∞ —Å–æ–ª–Ω—Ü–µ. –¶–µ–Ω–Ω—ã–π –∞–∫—Ç–∏–≤ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤!", 10, 0,
             8000),
            ("üíé –ê–ª–º–∞–∑–Ω–æ–µ —è–π—Ü–æ", 32000, "",
             "–≠–ø–∏—á–µ—Å–∫–æ–µ –∞–ª–º–∞–∑–Ω–æ–µ —è–π—Ü–æ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏. –ú–µ—á—Ç–∞ –∫–∞–∂–¥–æ–≥–æ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–∞!", 5, 0, 32000),
            ("üî• –ú–µ–º–Ω–æ–µ —è–π—Ü–æ", 100000, "", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ –º–µ–º–Ω–æ–µ —è–π—Ü–æ —Å –≤–∏—Ä—É—Å–Ω—ã–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º! –£–ª—å—Ç—Ä–∞-—Ä–µ–¥–∫–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä!", 3,
             0, 100000)
        ]
        cursor.executemany(
            'INSERT INTO eggs (name, price, image_file_id, description, limit_count, current_count, base_price) VALUES (?, ?, ?, ?, ?, ?, ?)',
            eggs_data)
    else:
        cursor.execute('UPDATE eggs SET name = ?, description = ? WHERE name = ?',
                       ("üî• –ú–µ–º–Ω–æ–µ —è–π—Ü–æ", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ –º–µ–º–Ω–æ–µ —è–π—Ü–æ —Å –≤–∏—Ä—É—Å–Ω—ã–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º! –£–ª—å—Ç—Ä–∞-—Ä–µ–¥–∫–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä!",
                        "–û–≥–Ω–µ–Ω–Ω–æ–µ —è–π—Ü–æ"))

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –±–æ–∫—Å—ã —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–π –≤–µ–∑—É—á–µ—Å—Ç—å—é
    cursor.execute('SELECT COUNT(*) FROM boxes')
    if cursor.fetchone()[0] == 0:
        boxes_data = [
            ("üì¶ –û–±—ã—á–Ω—ã–π –±–æ–∫—Å", 1000, "500-2000 YAIC|0-1 –û–±—ã—á–Ω—ã—Ö —è–∏—Ü|0-1 –ó–æ–ª–æ—Ç—ã—Ö —è–∏—Ü"),
            ("üéÅ –ü—Ä–µ–º–∏—É–º –±–æ–∫—Å", 5000, "2000-8000 YAIC|1-2 –û–±—ã—á–Ω—ã—Ö —è–∏—Ü|0-1 –ó–æ–ª–æ—Ç—ã—Ö —è–∏—Ü|0-1 –ê–ª–º–∞–∑–Ω—ã—Ö —è–∏—Ü"),
            ("üì´ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –±–æ–∫—Å", 20000, "8000-20000 YAIC|0-1 –ó–æ–ª–æ—Ç—ã—Ö —è–∏—Ü|0-1 –ê–ª–º–∞–∑–Ω—ã—Ö —è–∏—Ü|0-1 –ú–µ–º–Ω—ã—Ö —è–∏—Ü")
        ]
        cursor.executemany('INSERT INTO boxes (name, price, rewards) VALUES (?, ?, ?)', boxes_data)

    conn.commit()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_player(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM players WHERE user_id = ?', (user_id,))
    return cursor.fetchone()


def create_player(user_id, username, nickname, referrer_id=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        'INSERT OR IGNORE INTO players (user_id, username, nickname, balance, referrer_id) VALUES (?, ?, ?, 5000, ?)',
        (user_id, username, nickname, referrer_id))
    conn.commit()


def update_balance(user_id, amount):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('UPDATE players SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
    conn.commit()


def get_businesses():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM businesses')
    return cursor.fetchall()


def get_eggs():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM eggs')
    return cursor.fetchall()


def get_player_businesses(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
                   SELECT b.id, b.name, b.income, pb.purchased_at
                   FROM player_businesses pb
                            JOIN businesses b ON pb.business_id = b.id
                   WHERE pb.user_id = ?
                   ''', (user_id,))
    return cursor.fetchall()


def get_player_eggs(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
                   SELECT e.id, e.name, e.price, e.image_file_id, COUNT(pe.id), pe.purchased_price
                   FROM player_eggs pe
                            JOIN eggs e ON pe.egg_id = e.id
                   WHERE pe.user_id = ?
                   GROUP BY e.id
                   ''', (user_id,))
    return cursor.fetchall()


def get_top_players():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
                   SELECT p.nickname,
                          p.balance,
                          (SELECT SUM(b.income)
                           FROM player_businesses pb
                                    JOIN businesses b ON pb.business_id = b.id
                           WHERE pb.user_id = p.user_id) as income
                   FROM players p
                   ORDER BY p.balance DESC LIMIT 10
                   ''')
    return cursor.fetchall()


def update_egg_prices(egg_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT price FROM eggs WHERE id = ?', (egg_id,))
    current_price = cursor.fetchone()[0]
    new_price = int(current_price * 1.08)
    cursor.execute('UPDATE eggs SET price = ? WHERE id = ?', (new_price, egg_id))
    conn.commit()
    return new_price


def restock_eggs():
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT last_restock FROM eggs LIMIT 1')
        result = cursor.fetchone()
        if result and result[0]:
            last_restock = datetime.fromisoformat(result[0])
            if datetime.now() - last_restock > timedelta(days=7):
                cursor.execute('UPDATE eggs SET current_count = 0, price = base_price, last_restock = ?',
                               (datetime.now(),))
                conn.commit()
                return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
    return False


# –°–∏—Å—Ç–µ–º–∞ –¥—Ä—É–∑–µ–π
def add_friend(user_id, friend_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT COUNT(*) FROM players WHERE user_id = ?', (friend_id,))
        if cursor.fetchone()[0] == 0:
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω"

        if user_id == friend_id:
            return False, "–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è"

        cursor.execute('SELECT COUNT(*) FROM friends WHERE user_id = ? AND friend_id = ?', (user_id, friend_id))
        if cursor.fetchone()[0] > 0:
            return False, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É –≤–∞—Å –≤ –¥—Ä—É–∑—å—è—Ö"

        cursor.execute('INSERT OR IGNORE INTO friends (user_id, friend_id) VALUES (?, ?)', (user_id, friend_id))
        cursor.execute('INSERT OR IGNORE INTO friends (user_id, friend_id) VALUES (?, ?)', (friend_id, user_id))
        conn.commit()
        return True, "–î—Ä—É–≥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞: {e}"


def get_friends(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
                   SELECT p.user_id, p.nickname
                   FROM friends f
                            JOIN players p ON f.friend_id = p.user_id
                   WHERE f.user_id = ?
                   ''', (user_id,))
    return cursor.fetchall()


def remove_friend(user_id, friend_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('DELETE FROM friends WHERE user_id = ? AND friend_id = ?', (user_id, friend_id))
    cursor.execute('DELETE FROM friends WHERE user_id = ? AND friend_id = ?', (friend_id, user_id))
    conn.commit()


# –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–π–¥–æ–≤
def create_trade(from_user_id, to_user_id, item_type, item_id, price):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        if item_type == 'egg':
            cursor.execute('SELECT COUNT(*) FROM player_eggs WHERE user_id = ? AND egg_id = ?', (from_user_id, item_id))
        elif item_type == 'business':
            cursor.execute('SELECT COUNT(*) FROM player_businesses WHERE user_id = ? AND business_id = ?',
                           (from_user_id, item_id))

        if cursor.fetchone()[0] == 0:
            return False

        cursor.execute(
            'INSERT INTO trades (from_user_id, to_user_id, item_type, item_id, price) VALUES (?, ?, ?, ?, ?)',
            (from_user_id, to_user_id, item_type, item_id, price))
        trade_id = cursor.lastrowid

        conn.commit()
        return trade_id
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–π–¥–∞: {e}")
        return False


def get_pending_trades(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
                   SELECT t.id,
                          t.from_user_id,
                          t.to_user_id,
                          t.item_type,
                          t.item_id,
                          t.price,
                          p.nickname,
                          CASE
                              WHEN t.item_type = 'egg' THEN e.name
                              WHEN t.item_type = 'business' THEN b.name
                              END as item_name
                   FROM trades t
                            JOIN players p ON t.from_user_id = p.user_id
                            LEFT JOIN eggs e ON t.item_type = 'egg' AND t.item_id = e.id
                            LEFT JOIN businesses b ON t.item_type = 'business' AND t.item_id = b.id
                   WHERE t.to_user_id = ?
                     AND t.status = 'pending'
                   ''', (user_id,))
    return cursor.fetchall()


def accept_trade(trade_id):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute('SELECT * FROM trades WHERE id = ?', (trade_id,))
        trade = cursor.fetchone()
        if not trade:
            return False

        trade_id, from_user_id, to_user_id, item_type, item_id, price, status, created_at = trade

        cursor.execute('SELECT balance FROM players WHERE user_id = ?', (to_user_id,))
        to_user_balance = cursor.fetchone()[0]

        if to_user_balance < price:
            return False

        if item_type == 'egg':
            cursor.execute('SELECT id FROM player_eggs WHERE user_id = ? AND egg_id = ? LIMIT 1',
                           (from_user_id, item_id))
            item_to_transfer = cursor.fetchone()
            if not item_to_transfer:
                return False

            cursor.execute('DELETE FROM player_eggs WHERE id = ?', (item_to_transfer[0],))
            cursor.execute('INSERT INTO player_eggs (user_id, egg_id, purchased_price) VALUES (?, ?, ?)',
                           (to_user_id, item_id, price))

        elif item_type == 'business':
            cursor.execute('SELECT id FROM player_businesses WHERE user_id = ? AND business_id = ?',
                           (from_user_id, item_id))
            item_to_transfer = cursor.fetchone()
            if not item_to_transfer:
                return False

            cursor.execute('DELETE FROM player_businesses WHERE id = ?', (item_to_transfer[0],))
            cursor.execute('INSERT INTO player_businesses (user_id, business_id) VALUES (?, ?)', (to_user_id, item_id))

        cursor.execute('UPDATE players SET balance = balance - ? WHERE user_id = ?', (price, to_user_id))
        cursor.execute('UPDATE players SET balance = balance + ? WHERE user_id = ?', (price, from_user_id))
        cursor.execute('UPDATE trades SET status = "accepted" WHERE id = ?', (trade_id,))

        conn.commit()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ç—Ä–µ–π–¥–∞: {e}")
        conn.rollback()
        return False


def reject_trade(trade_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('UPDATE trades SET status = "rejected" WHERE id = ?', (trade_id,))
    conn.commit()


# –°–∏—Å—Ç–µ–º–∞ –±–æ–∫—Å–æ–≤ - –° –ü–û–ù–ò–ñ–ï–ù–ù–û–ô –í–ï–ó–£–ß–ï–°–¢–¨–Æ
def get_boxes():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM boxes')
    return cursor.fetchall()


def open_box(user_id, box_id):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute('SELECT * FROM boxes WHERE id = ?', (box_id,))
        box = cursor.fetchone()
        if not box:
            return None

        box_id, name, price, rewards_str = box

        cursor.execute('SELECT balance FROM players WHERE user_id = ?', (user_id,))
        player = cursor.fetchone()
        if not player:
            return None

        balance = player[0]

        if balance < price:
            return None

        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–æ–∫—Å–∞
        cursor.execute('UPDATE players SET balance = balance - ? WHERE user_id = ?', (price, user_id))

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—ã —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–π –≤–µ–∑—É—á–µ—Å—Ç—å—é
        rewards = []
        rewards_config = rewards_str.split('|')

        for reward in rewards_config:
            if 'YAIC' in reward:
                # –ù–∞–≥—Ä–∞–¥–∞ –≤ YAIC
                yaic_range = reward.split()[0]
                min_yaic, max_yaic = map(int, yaic_range.split('-'))
                yaic_reward = random.randint(min_yaic, max_yaic)
                cursor.execute('UPDATE players SET balance = balance + ? WHERE user_id = ?', (yaic_reward, user_id))
                rewards.append(f"{yaic_reward} YAIC")

            elif '—è–π—Ü' in reward.lower():
                # –ù–∞–≥—Ä–∞–¥–∞ –≤ —è–π—Ü–∞—Ö —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
                egg_range = reward.split()[0]
                min_eggs, max_eggs = map(int, egg_range.split('-'))

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —è–π—Ü–∞
                if '–û–±—ã—á–Ω—ã—Ö' in reward:
                    egg_type = "ü•ö –û–±—ã—á–Ω–æ–µ —è–π—Ü–æ"
                    egg_chance = 60  # 60% —à–∞–Ω—Å
                elif '–ó–æ–ª–æ—Ç—ã—Ö' in reward:
                    egg_type = "ü•ö –ó–æ–ª–æ—Ç–æ–µ —è–π—Ü–æ"
                    egg_chance = 30  # 30% —à–∞–Ω—Å
                elif '–ê–ª–º–∞–∑–Ω—ã—Ö' in reward:
                    egg_type = "üíé –ê–ª–º–∞–∑–Ω–æ–µ —è–π—Ü–æ"
                    egg_chance = 15  # 15% —à–∞–Ω—Å
                elif '–ú–µ–º–Ω—ã—Ö' in reward:  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: '–≤' –Ω–∞ 'in'
                    egg_type = "üî• –ú–µ–º–Ω–æ–µ —è–π—Ü–æ"
                    egg_chance = 5  # 5% —à–∞–Ω—Å
                else:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è
                if random.randint(1, 100) <= egg_chance:
                    cursor.execute('SELECT id FROM eggs WHERE name LIKE ?', (f'%{egg_type}%',))
                    egg_result = cursor.fetchone()
                    if egg_result:
                        egg_id = egg_result[0]
                        num_eggs = random.randint(min_eggs, max_eggs)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —è–∏—Ü
                        cursor.execute('SELECT current_count, limit_count FROM eggs WHERE id = ?', (egg_id,))
                        egg_info = cursor.fetchone()
                        if egg_info:
                            current_count, limit_count = egg_info
                            if current_count + num_eggs <= limit_count:
                                for _ in range(num_eggs):
                                    cursor.execute(
                                        'INSERT INTO player_eggs (user_id, egg_id, purchased_price) VALUES (?, ?, 0)',
                                        (user_id, egg_id))
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —è–∏—Ü
                                cursor.execute('UPDATE eggs SET current_count = current_count + ? WHERE id = ?',
                                               (num_eggs, egg_id))
                                rewards.append(f"{num_eggs} {egg_type}")

        conn.commit()
        return rewards if rewards else ["–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ"]

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ–∫—Å–∞: {e}")
        conn.rollback()
        return None


# –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∏–∑–Ω–µ—Å–æ–≤)
def collect_income(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ –±–∏–∑–Ω–µ—Å—ã
        cursor.execute('SELECT COUNT(*) FROM player_businesses WHERE user_id = ?', (user_id,))
        business_count = cursor.fetchone()[0]

        if business_count == 0:
            return 0, "no_businesses"

        cursor.execute('SELECT last_income_collection FROM players WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        if not result or not result[0]:
            return 0, "ready"

        last_collection = datetime.fromisoformat(result[0])
        time_passed = datetime.now() - last_collection
        minutes_passed = time_passed.total_seconds() / 60

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 30 –º–∏–Ω—É—Ç
        if minutes_passed < 30:
            minutes_remaining = 30 - int(minutes_passed)
            return 0, f"wait_{minutes_remaining}"

        cursor.execute('''
                       SELECT SUM(b.income)
                       FROM player_businesses pb
                                JOIN businesses b ON pb.business_id = b.id
                       WHERE pb.user_id = ?
                       ''', (user_id,))

        total_income = cursor.fetchone()[0] or 0

        if total_income > 0:
            cursor.execute('UPDATE players SET balance = balance + ?, last_income_collection = ? WHERE user_id = ?',
                           (total_income, datetime.now(), user_id))
            conn.commit()

        return total_income, "ready"

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞: {e}")
        return 0, "error"


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏ –±–∏–∑–Ω–µ—Å–∞
def sell_business(user_id, business_id):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute(
            'SELECT b.price FROM player_businesses pb JOIN businesses b ON pb.business_id = b.id WHERE pb.user_id = ? AND pb.business_id = ?',
            (user_id, business_id))
        result = cursor.fetchone()
        if not result:
            return False

        sell_price = int(result[0] * 0.7)  # 70% –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π —Ü–µ–Ω—ã

        cursor.execute('DELETE FROM player_businesses WHERE user_id = ? AND business_id = ?', (user_id, business_id))
        cursor.execute('UPDATE players SET balance = balance + ? WHERE user_id = ?', (sell_price, user_id))

        conn.commit()
        return sell_price

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–∑–Ω–µ—Å–∞: {e}")
        return False


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏ —è–π—Ü–∞
def sell_egg(user_id, egg_id):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute('SELECT id FROM player_eggs WHERE user_id = ? AND egg_id = ? LIMIT 1', (user_id, egg_id))
        result = cursor.fetchone()
        if not result:
            return False

        cursor.execute('SELECT price FROM eggs WHERE id = ?', (egg_id,))
        current_price = cursor.fetchone()[0]
        sell_price = int(current_price * 0.8)  # 80% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã

        cursor.execute('DELETE FROM player_eggs WHERE id = ?', (result[0],))
        cursor.execute('UPDATE players SET balance = balance + ? WHERE user_id = ?', (sell_price, user_id))

        conn.commit()
        return sell_price

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ —è–π—Ü–∞: {e}")
        return False


# –°–ò–°–¢–ï–ú–ê –ö–†–ï–î–ò–¢–û–í
def take_loan(user_id, amount):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∫—Ä–µ–¥–∏—Ç
        cursor.execute('SELECT COUNT(*) FROM loans WHERE user_id = ? AND remaining_amount > 0', (user_id,))
        if cursor.fetchone()[0] > 0:
            return False, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫—Ä–µ–¥–∏—Ç!"

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç - 50,000 YAIC
        if amount > 50000:
            return False, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: 50,000 YAIC"

        if amount < 1000:
            return False, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: 1,000 YAIC"

        # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 20%
        interest_rate = 20
        total_to_repay = amount + (amount * interest_rate // 100)

        # –í—ã–¥–∞–µ–º –∫—Ä–µ–¥–∏—Ç
        cursor.execute('UPDATE players SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
        cursor.execute('INSERT INTO loans (user_id, amount, interest_rate, remaining_amount) VALUES (?, ?, ?, ?)',
                       (user_id, amount, interest_rate, total_to_repay))

        conn.commit()
        return True, f"üí∞ –ö—Ä–µ–¥–∏—Ç –≤—ã–¥–∞–Ω!\n\nüíµ –ü–æ–ª—É—á–µ–Ω–æ: {amount} YAIC\nüìä –ö –≤–æ–∑–≤—Ä–∞—Ç—É: {total_to_repay} YAIC\nüìà –ü—Ä–æ—Ü–µ–Ω—Ç: {interest_rate}%"

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –∫—Ä–µ–¥–∏—Ç–∞: {e}")
        return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫—Ä–µ–¥–∏—Ç–∞"


def repay_loan(user_id, amount):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–µ
        cursor.execute('SELECT id, remaining_amount FROM loans WHERE user_id = ? AND remaining_amount > 0', (user_id,))
        loan = cursor.fetchone()

        if not loan:
            return False, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤"

        loan_id, remaining_amount = loan

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        cursor.execute('SELECT balance FROM players WHERE user_id = ?', (user_id,))
        balance = cursor.fetchone()[0]

        if balance < amount:
            return False, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ: {amount} YAIC"

        if amount > remaining_amount:
            amount = remaining_amount

        # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞
        cursor.execute('UPDATE players SET balance = balance - ? WHERE user_id = ?', (amount, user_id))
        cursor.execute('UPDATE loans SET remaining_amount = remaining_amount - ? WHERE id = ?', (amount, loan_id))

        conn.commit()

        new_remaining = remaining_amount - amount
        if new_remaining <= 0:
            return True, f"‚úÖ –ö—Ä–µ–¥–∏—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—à–µ–Ω!"
        else:
            return True, f"üíµ –í–Ω–µ—Å–µ–Ω–æ: {amount} YAIC\nüìä –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–ª–∞—Ç–∏—Ç—å: {new_remaining} YAIC"

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞: {e}")
        return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≥–∞—à–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞"


def get_loan_info(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute(
        'SELECT amount, interest_rate, remaining_amount FROM loans WHERE user_id = ? AND remaining_amount > 0',
        (user_id,))
    loan = cursor.fetchone()

    if loan:
        amount, interest_rate, remaining = loan
        return {
            'has_loan': True,
            'amount': amount,
            'interest_rate': interest_rate,
            'remaining': remaining
        }
    else:
        return {'has_loan': False}


# === –°–ò–°–¢–ï–ú–ê –ö–û–î–û–í ===
def create_promo_code(code, reward_type, reward_value, reward_item, uses_left, expires_days=7):
    conn = get_db_connection()
    cursor = conn.cursor()

    expires_at = datetime.now() + timedelta(days=expires_days)

    try:
        cursor.execute('''
            INSERT INTO promo_codes (code, reward_type, reward_value, reward_item, uses_left, expires_at)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (code, reward_type, reward_value, reward_item, uses_left, expires_at))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False


def use_promo_code(user_id, code):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
        cursor.execute('''
            SELECT id, reward_type, reward_value, reward_item, uses_left, expires_at 
            FROM promo_codes 
            WHERE code = ? AND uses_left > 0 AND expires_at > ?
        ''', (code, datetime.now()))

        promo = cursor.fetchone()
        if not promo:
            return False, "‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å—Ç–µ–∫ –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!"

        code_id, reward_type, reward_value, reward_item, uses_left, expires_at = promo

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –∫–æ–¥
        cursor.execute('SELECT 1 FROM used_codes WHERE user_id = ? AND code_id = ?', (user_id, code_id))
        if cursor.fetchone():
            return False, "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥!"

        # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
        if reward_type == 'yaic':
            update_balance(user_id, reward_value)
            reward_text = f"üíµ {reward_value} YAIC"
        elif reward_type == 'egg':
            # –ù–∞—Ö–æ–¥–∏–º ID —è–π—Ü–∞ –ø–æ –∏–º–µ–Ω–∏
            cursor.execute('SELECT id FROM eggs WHERE name = ?', (reward_item,))
            egg_result = cursor.fetchone()
            if egg_result:
                egg_id = egg_result[0]
                cursor.execute('INSERT INTO player_eggs (user_id, egg_id, purchased_price) VALUES (?, ?, 0)',
                               (user_id, egg_id))
                reward_text = f"ü•ö {reward_item}"
            else:
                return False, "‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∑–∞–Ω–Ω–æ–µ —è–π—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        elif reward_type == 'business':
            # –ù–∞—Ö–æ–¥–∏–º ID –±–∏–∑–Ω–µ—Å–∞ –ø–æ –∏–º–µ–Ω–∏
            cursor.execute('SELECT id FROM businesses WHERE name = ?', (reward_item,))
            business_result = cursor.fetchone()
            if business_result:
                business_id = business_result[0]
                cursor.execute('INSERT INTO player_businesses (user_id, business_id) VALUES (?, ?)',
                               (user_id, business_id))
                reward_text = f"üè¢ {reward_item}"
            else:
                return False, "‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∑–∞–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        else:
            return False, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã"

        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∏ –æ—Ç–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        cursor.execute('UPDATE promo_codes SET uses_left = uses_left - 1 WHERE id = ?', (code_id,))
        cursor.execute('INSERT INTO used_codes (user_id, code_id) VALUES (?, ?)', (user_id, code_id))

        conn.commit()
        return True, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏: {reward_text}"

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞: {e}")
        return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–¥–∞"


def get_active_codes():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT code, reward_type, reward_value, reward_item, uses_left, expires_at
        FROM promo_codes 
        WHERE uses_left > 0 AND expires_at > ?
    ''', (datetime.now(),))
    return cursor.fetchall()


# === –†–ï–§–ï–†–ê–õ–ö–ê ===
def process_referral(new_user_id, referrer_id):
    if referrer_id and referrer_id != new_user_id:
        cursor = get_db_connection().cursor()
        cursor.execute('SELECT 1 FROM players WHERE user_id = ?', (referrer_id,))
        if cursor.fetchone():
            update_balance(new_user_id, 5000)
            update_balance(referrer_id, 5000)
            return True
    return False


# === –ö–£–õ–î–ê–£–ù –ë–û–ö–°–û–í ===
def can_open_box(user_id):
    player = get_player(user_id)
    if not player or not player[6]:  # last_box_open
        return True, None

    last_open = datetime.fromisoformat(player[6])
    time_passed = datetime.now() - last_open
    seconds_passed = time_passed.total_seconds()

    if seconds_passed < 120:  # 2 –º–∏–Ω—É—Ç—ã = 120 —Å–µ–∫—É–Ω–¥
        seconds_remaining = 120 - int(seconds_passed)
        return False, seconds_remaining

    return True, None


def set_box_cooldown(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('UPDATE players SET last_box_open = ? WHERE user_id = ?', (datetime.now(), user_id))
    conn.commit()


# === –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ ===
async def admin_give_yaic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞!")
        return
    try:
        uid, amount = int(context.args[0]), int(context.args[1])
        update_balance(uid, amount)
        await update.message.reply_text(f"‚úÖ –í—ã–¥–∞–Ω–æ {amount} YAIC –∏–≥—Ä–æ–∫—É {uid}")
    except:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give_yaic <id> <—Å—É–º–º–∞>")


async def admin_create_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞!")
        return

    try:
        # /create_code –∫–æ–¥ —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        code = context.args[0]
        reward_type = context.args[1]  # yaic, egg, business
        reward_value = int(context.args[2]) if reward_type == 'yaic' else 0
        reward_item = context.args[3] if reward_type in ['egg', 'business'] else ''
        uses_left = int(context.args[4])

        if create_promo_code(code, reward_type, reward_value, reward_item, uses_left):
            await update.message.reply_text(
                f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n–ö–æ–¥: {code}\n–ù–∞–≥—Ä–∞–¥–∞: {reward_type} {reward_value} {reward_item}\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {uses_left}")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create_code <–∫–æ–¥> <yaic/egg/business> <–∑–Ω–∞—á–µ–Ω–∏–µ> <–ø—Ä–µ–¥–º–µ—Ç> <–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è>\n–ü—Ä–∏–º–µ—Ä: /create_code TEST123 yaic 5000 '' 100")


async def fix_nicknames(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞!")
        return

    conn = get_db_connection()
    cursor = conn.cursor()

    # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–æ–≤ —Å None –Ω–∏–∫–æ–º
    cursor.execute('SELECT user_id, username FROM players WHERE nickname IS NULL OR nickname = "None"')
    players = cursor.fetchall()

    fixed_count = 0
    for user_id, username in players:
        if username and username != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
            new_nickname = f"@{username}"
        else:
            new_nickname = f"–ò–≥—Ä–æ–∫_{user_id}"

        cursor.execute('UPDATE players SET nickname = ? WHERE user_id = ?', (new_nickname, user_id))
        fixed_count += 1

    conn.commit()
    await update.message.reply_text(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∏–∫–æ–≤: {fixed_count}")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫
async def upload_images(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    try:
        egg_files = ['egg1.png', 'egg2.png', 'egg3.png', 'egg4.png']
        file_ids = []

        for egg_file in egg_files:
            if os.path.exists(egg_file):
                with open(egg_file, 'rb') as photo:
                    message = await context.bot.send_photo(
                        chat_id=user_id,
                        photo=photo,
                        caption=f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è {egg_file}"
                    )
                    file_id = message.photo[-1].file_id
                    file_ids.append(file_id)
                    print(f"{egg_file}: {file_id}")
            else:
                print(f"–§–∞–π–ª {egg_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                file_ids.append("")

        conn = get_db_connection()
        cursor = conn.cursor()

        eggs = get_eggs()
        for i, egg in enumerate(eggs):
            if i < len(file_ids) and file_ids[i]:
                cursor.execute('UPDATE eggs SET image_file_id = ? WHERE id = ?', (file_ids[i], egg[0]))

        conn.commit()

        await update.message.reply_text("‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫: {e}")


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    referrer_id = None
    if context.args and context.args[0].isdigit():
        referrer_id = int(context.args[0])

    try:
        if restock_eggs():
            await update.message.reply_text("üîÑ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! –í—Å–µ —è–π—Ü–∞ —Å–Ω–æ–≤–∞ –≤ –ø—Ä–æ–¥–∞–∂–µ –ø–æ –±–∞–∑–æ–≤—ã–º —Ü–µ–Ω–∞–º!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

    player = get_player(user_id)

    if player and player[2]:
        await show_dashboard(update, context)
    else:
        keyboard = [[InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–Ø–π—Ü–∞ –ë–∏–∑–Ω–µ—Å'! \n\n"
            "üíº –°—Ç—Ä–æ–π –±–∏–∑–Ω–µ—Å, ü•ö –ø–æ–∫—É–ø–∞–π —Ä–µ–¥–∫–∏–µ —è–π—Ü–∞ –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å —Å–∞–º—ã–º –±–æ–≥–∞—Ç—ã–º –∏–≥—Ä–æ–∫–æ–º!",
            reply_markup=reply_markup
        )
        if not player:
            create_player(user_id, username, None, referrer_id)
            if process_referral(user_id, referrer_id):
                await update.message.reply_text("üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞: +5000 YAIC —Ç–µ–±–µ –∏ –¥—Ä—É–≥—É!")


# === –ü–û–ö–£–ü–ö–ê –Ø–ô–¶–ê ‚Äî 1 –ù–ê –¢–ò–ü ===
async def buy_egg(query, context: ContextTypes.DEFAULT_TYPE, egg_id):
    user_id = query.from_user.id
    player = get_player(user_id)

    eggs = get_eggs()
    egg = None
    for e in eggs:
        if e[0] == egg_id:
            egg = e
            break

    if not egg:
        await context.bot.send_message(chat_id=user_id, text="‚ùå –Ø–π—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    id, name, price, image_file_id, description, limit_count, current_count, base_price, last_restock = egg

    if current_count >= limit_count:
        await context.bot.send_message(chat_id=user_id, text="‚ùå –≠—Ç–æ —è–π—Ü–æ —É–∂–µ —Ä–∞—Å–∫—É–ø–ª–µ–Ω–æ!")
        return

    # –ü–†–û–í–ï–†–ö–ê: –£–ñ–ï –ï–°–¢–¨?
    cursor = get_db_connection().cursor()
    cursor.execute('SELECT 1 FROM player_eggs WHERE user_id = ? AND egg_id = ?', (user_id, egg_id))
    if cursor.fetchone():
        await context.bot.send_message(chat_id=user_id, text="‚ùå –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ —è–π—Ü–æ!")
        return

    if player[3] < price:
        await context.bot.send_message(chat_id=user_id, text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ YAIC!")
        return

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute('BEGIN TRANSACTION')
        cursor.execute('UPDATE players SET balance = balance - ? WHERE user_id = ?', (price, user_id))
        cursor.execute('UPDATE eggs SET current_count = current_count + 1 WHERE id = ?', (egg_id,))
        cursor.execute('INSERT INTO player_eggs (user_id, egg_id, purchased_price) VALUES (?, ?, ?)',
                       (user_id, egg_id, price))
        new_price = int(price * 1.08)
        cursor.execute('UPDATE eggs SET price = ? WHERE id = ?', (new_price, egg_id))
        conn.commit()

        await context.bot.send_message(
            chat_id=user_id,
            text=f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!</b>\n\n<b>–í—ã –∫—É–ø–∏–ª–∏:</b> {name}\n<b>–ù–æ–º–µ—Ä —è–π—Ü–∞:</b> #{current_count + 1} –∏–∑ {limit_count}\n<b>–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏:</b> {price} YAIC\n<b>–°–ª–µ–¥—É—é—â–µ–µ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å:</b> {new_price} YAIC (+8%)",
            parse_mode='HTML'
        )

        await show_egg_market(query, context)

    except Exception as e:
        conn.rollback()
        await context.bot.send_message(chat_id=user_id, text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —è–π—Ü–∞")


# === –û–¢–ö–†–´–¢–ò–ï –ë–û–ö–°–ê ‚Äî –ö–£–õ–î–ê–£–ù 2 –ú–ò–ù ===
async def open_box_handler(query, context: ContextTypes.DEFAULT_TYPE, box_id):
    user_id = query.from_user.id

    can_open, remaining = can_open_box(user_id)
    if not can_open:
        minutes = remaining // 60
        seconds = remaining % 60

        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫—É–ª–¥–∞—É–Ω–µ
        cooldown_message = (
            f"‚è∞ <b>–ö—É–ª–¥–∞—É–Ω!</b>\n\n"
            f"–í—ã –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–ª–∏ –±–æ–∫—Å. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ:\n"
            f"<b>{minutes:02d}:{seconds:02d}</b>\n\n"
            f"üí° <i>–ë–æ–∫—Å—ã –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Ä–∞–∑ –≤ 2 –º–∏–Ω—É—Ç—ã</i>"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ alert
        await context.bot.send_message(
            chat_id=user_id,
            text=cooldown_message,
            parse_mode='HTML'
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–∫—Å–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    boxes = get_boxes()
    box_name = ""
    box_price = 0
    for box in boxes:
        if box[0] == box_id:
            box_name = box[1]
            box_price = box[2]
            break

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º
    player = get_player(user_id)
    if player[3] < box_price:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!</b>\n\n"
                 f"–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è {box_name} –Ω—É–∂–Ω–æ {box_price} YAIC\n"
                 f"–í–∞—à –±–∞–ª–∞–Ω—Å: {player[3]} YAIC",
            parse_mode='HTML'
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è
    opening_message = await context.bot.send_message(
        chat_id=user_id,
        text=f"üéÅ <b>–û—Ç–∫—Ä—ã–≤–∞–µ–º {box_name}...</b>\n\n"
             f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...",
        parse_mode='HTML'
    )

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –¥—Ä–∞–º–∞—Ç–∏–∑–º–∞
    await asyncio.sleep(2)

    rewards = open_box(user_id, box_id)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏
    try:
        await context.bot.delete_message(chat_id=user_id, message_id=opening_message.message_id)
    except:
        pass

    if rewards is None:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±–æ–∫—Å!</b>\n\n"
                 "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                 "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ YAIC\n"
                 "‚Ä¢ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —è–∏—Ü\n"
                 "‚Ä¢ –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
            parse_mode='HTML'
        )
    else:
        if rewards == ["–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ"]:
            rewards_text = (
                "üòî <b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ...</b>\n\n"
                "üí´ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ - —É–¥–∞—á–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–ª—ã–±–Ω–µ—Ç—Å—è!"
            )
        else:
            rewards_text = "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏:</b>\n\n" + "\n".join([f"üéÅ {reward}" for reward in rewards])

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
        rewards_text += f"\n\n‚è∞ <i>–°–ª–µ–¥—É—é—â–∏–π –±–æ–∫—Å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã</i>"

        await context.bot.send_message(
            chat_id=user_id,
            text=rewards_text,
            parse_mode='HTML'
        )

    set_box_cooldown(user_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    user_id = query.from_user.id

    try:
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
    except:
        pass

    if data == "start_game":
        await ask_nickname(query, context)
    elif data == "dashboard":
        await show_dashboard(query, context)
    elif data == "buy_business":
        await show_businesses(query, context)
    elif data == "egg_market":
        await show_egg_market(query, context)
    elif data == "inventory":
        await show_inventory_menu(query, context)
    elif data == "inventory_eggs":
        await show_egg_inventory(query, context)
    elif data == "inventory_businesses":
        await show_business_inventory(query, context)
    elif data == "instructions":
        await show_instructions(query, context)
    elif data == "top_players":
        await show_top_players(query, context)
    elif data == "friends":
        await show_friends_menu(query, context)
    elif data == "trades":
        await show_trades_menu(query, context)
    elif data == "boxes":
        await show_boxes_menu(query, context)
    elif data == "loans":
        await show_loans_menu(query, context)
    elif data == "promo_codes":
        await show_promo_codes_menu(query, context)
    elif data == "enter_promo_code":
        await ask_promo_code(query, context)
    elif data == "add_friend":
        await add_friend_handler(query, context)
    elif data.startswith("remove_friend_"):
        friend_id = int(data.split("_")[2])
        await remove_friend_handler(query, context, friend_id)
    elif data.startswith("business_"):
        business_id = int(data.split("_")[1])
        await buy_business(query, context, business_id)
    elif data.startswith("egg_detail_"):
        egg_id = int(data.split("_")[2])
        await show_egg_details(query, context, egg_id)
    elif data.startswith("buy_egg_"):
        egg_id = int(data.split("_")[2])
        await buy_egg(query, context, egg_id)
    elif data.startswith("collect_income"):
        await collect_income_handler(query, context)
    elif data.startswith("sell_business_"):
        business_id = int(data.split("_")[2])
        await sell_business_handler(query, context, business_id)
    elif data.startswith("sell_egg_"):
        egg_id = int(data.split("_")[2])
        await sell_egg_handler(query, context, egg_id)
    elif data.startswith("trade_business_"):
        business_id = int(data.split("_")[2])
        await create_business_trade_handler(query, context, business_id)
    elif data.startswith("trade_egg_"):
        egg_id = int(data.split("_")[2])
        await create_egg_trade_handler(query, context, egg_id)
    elif data.startswith("select_friend_"):
        friend_id = int(data.split("_")[2])
        await select_friend_handler(query, context, friend_id)
    elif data.startswith("accept_trade_"):
        trade_id = int(data.split("_")[2])
        await accept_trade_handler(query, context, trade_id)
    elif data.startswith("reject_trade_"):
        trade_id = int(data.split("_")[2])
        await reject_trade_handler(query, context, trade_id)
    elif data.startswith("open_box_"):
        box_id = int(data.split("_")[2])
        await open_box_handler(query, context, box_id)
    elif data.startswith("take_loan_"):
        amount = int(data.split("_")[2])
        await take_loan_handler(query, context, amount)
    elif data.startswith("repay_loan_"):
        amount = int(data.split("_")[2])
        await repay_loan_handler(query, context, amount)
    elif data == "custom_loan":
        await ask_loan_amount(query, context)
    elif data == "back_to_market":
        await show_egg_market(query, context)
    elif data == "back_to_inventory":
        await show_inventory_menu(query, context)
    elif data == "back_to_friends":
        await show_friends_menu(query, context)
    elif data == "back_to_trades":
        await show_trades_menu(query, context)
    elif data == "back_to_boxes":
        await show_boxes_menu(query, context)
    elif data == "back_to_loans":
        await show_loans_menu(query, context)
    elif data == "back_to_promo":
        await show_promo_codes_menu(query, context)
    elif data == "sold_out":
        await context.bot.send_message(chat_id=user_id, text="‚ùå –≠—Ç–æ —è–π—Ü–æ —É–∂–µ —Ä–∞—Å–∫—É–ø–ª–µ–Ω–æ!")


# –ó–∞–ø—Ä–æ—Å –Ω–∏–∫–∞
async def ask_nickname(query, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['awaiting_nickname'] = True
    await context.bot.send_message(
        chat_id=query.from_user.id,
        text="üë§ –í–≤–µ–¥–∏ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫ (2-20 —Å–∏–º–≤–æ–ª–æ–≤):"
    )


# –ó–∞–ø—Ä–æ—Å —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞
async def ask_loan_amount(query, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['awaiting_loan_amount'] = True
    await context.bot.send_message(
        chat_id=query.from_user.id,
        text="üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ (–æ—Ç 1,000 –¥–æ 50,000 YAIC):"
    )


# –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–º–æ–∫–æ–¥–∞
async def ask_promo_code(query, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['awaiting_promo_code'] = True
    await context.bot.send_message(
        chat_id=query.from_user.id,
        text="üé´ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    if context.user_data.get('awaiting_nickname'):
        nickname = update.message.text.strip()

        if len(nickname) < 2 or len(nickname) > 20:
            await update.message.reply_text("‚ùå –ù–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return

        create_player(user_id, username, nickname)
        context.user_data['awaiting_nickname'] = False

        await update.message.reply_text(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, {nickname}! –î–µ—Ä–∂–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ 5000 YAIC!")
        await show_dashboard(update, context)

    elif context.user_data.get('awaiting_friend_id'):
        try:
            friend_id = int(update.message.text.strip())
            success, message = add_friend(user_id, friend_id)
            await update.message.reply_text(message)
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
        context.user_data['awaiting_friend_id'] = False
        await show_friends_menu(update, context)

    elif context.user_data.get('awaiting_trade_price'):
        try:
            price = int(update.message.text.strip())
            item_type = context.user_data['trade_item_type']
            item_id = context.user_data['trade_item_id']
            friend_id = context.user_data['trade_friend_id']

            trade_id = create_trade(user_id, friend_id, item_type, item_id, price)
            if trade_id:
                await update.message.reply_text(f"‚úÖ –¢—Ä–µ–π–¥ —Å–æ–∑–¥–∞–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –¥—Ä—É–≥–∞.")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–π–¥–∞.")
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")

        context.user_data['awaiting_trade_price'] = False
        context.user_data['trade_item_type'] = None
        context.user_data['trade_item_id'] = None
        context.user_data['trade_friend_id'] = None

    elif context.user_data.get('awaiting_loan_amount'):
        try:
            amount = int(update.message.text.strip())
            success, message = take_loan(user_id, amount)
            await update.message.reply_text(message)
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
        context.user_data['awaiting_loan_amount'] = False
        await show_loans_menu(update, context)

    elif context.user_data.get('awaiting_promo_code'):
        code = update.message.text.strip().upper()
        success, message = use_promo_code(user_id, code)
        await update.message.reply_text(message)
        context.user_data['awaiting_promo_code'] = False
        await show_promo_codes_menu(update, context)


# –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
async def show_dashboard(update, context: ContextTypes.DEFAULT_TYPE):
    if hasattr(update, 'effective_user'):
        user_id = update.effective_user.id
    else:
        user_id = update.from_user.id

    player = get_player(user_id)

    if not player:
        await start(update, context)
        return

    nickname, balance = player[2], player[3]

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ None –Ω–∏–∫–∞
    if nickname is None:
        display_nickname = "–ë–µ–∑ –Ω–∏–∫–∞"
    else:
        display_nickname = nickname

    player_businesses = get_player_businesses(user_id)
    total_income_per_30min = sum(income for _, _, income, _ in player_businesses)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç
    loan_info = get_loan_info(user_id)
    loan_text = ""
    if loan_info['has_loan']:
        loan_text = f"üìä –ö—Ä–µ–¥–∏—Ç: {loan_info['remaining']} YAIC\n"

    text = f"""
üè† <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>

üë§ –ò–≥—Ä–æ–∫: {display_nickname}
üíµ –ë–∞–ª–∞–Ω—Å: {balance} YAIC
{loan_text}üìà –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: {total_income_per_30min} YAIC/30–º–∏–Ω
üè¢ –ë–∏–∑–Ω–µ—Å–æ–≤: {len(player_businesses)}
ü•ö –Ø–∏—Ü: {len(get_player_eggs(user_id))}
üë• –î—Ä—É–∑–µ–π: {len(get_friends(user_id))}

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """

    keyboard = [
        [InlineKeyboardButton("üè¢ –ö—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å", callback_data="buy_business")],
        [InlineKeyboardButton("ü•ö –†—ã–Ω–æ–∫ —è–∏—Ü", callback_data="egg_market")],
        [InlineKeyboardButton("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")],
        [InlineKeyboardButton("üë• –î—Ä—É–∑—å—è", callback_data="friends")],
        [InlineKeyboardButton("üîÑ –¢—Ä–µ–π–¥—ã", callback_data="trades")],
        [InlineKeyboardButton("üì¶ –ë–æ–∫—Å—ã", callback_data="boxes")],
        [InlineKeyboardButton("üí∞ –ö—Ä–µ–¥–∏—Ç—ã", callback_data="loans")],
        [InlineKeyboardButton("üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="promo_codes")],
        [InlineKeyboardButton("üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="top_players")],
        [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instructions")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if hasattr(update, 'message'):
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup, parse_mode='HTML')


# –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤
async def show_top_players(query, context: ContextTypes.DEFAULT_TYPE):
    top_players = get_top_players()

    text = "üèÜ <b>–¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤</b>\n\n"

    if not top_players:
        text += "üòî –ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ"
    else:
        for i, (nickname, balance, income) in enumerate(top_players, 1):
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ None
            if nickname is None:
                display_name = "–ë–µ–∑ –Ω–∏–∫–∞"
            else:
                display_name = nickname

            income = income or 0
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            text += f"{medal} {display_name}\n"
            text += f"   üíµ {balance} YAIC | üìà {income} YAIC/30–º–∏–Ω\n\n"

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dashboard")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(chat_id=query.from_user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


# –ú–∞–≥–∞–∑–∏–Ω –±–∏–∑–Ω–µ—Å–æ–≤
async def show_businesses(query, context: ContextTypes.DEFAULT_TYPE):
    businesses = get_businesses()
    user_id = query.from_user.id
    player = get_player(user_id)
    balance = player[3] if player else 0

    text = f"üè¢ <b>–ú–∞–≥–∞–∑–∏–Ω –±–∏–∑–Ω–µ—Å–æ–≤</b>\n\nüíµ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} YAIC\n\n"
    keyboard = []

    for business in businesses:
        id, name, price, income, description = business
        can_afford = "‚úÖ" if balance >= price else "‚ùå"
        text += f"{can_afford} {name}\n"
        text += f"   üí∞ –¶–µ–Ω–∞: {price} YAIC\n"
        text += f"   üìà –î–æ—Ö–æ–¥: {income} YAIC/30–º–∏–Ω\n"
        text += f"   üìù {description}\n\n"

        keyboard.append([InlineKeyboardButton(f"{name} - {price}YAIC", callback_data=f"business_{id}")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dashboard")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(chat_id=query.from_user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def buy_business(query, context: ContextTypes.DEFAULT_TYPE, business_id):
    user_id = query.from_user.id
    player = get_player(user_id)

    businesses = get_businesses()
    business = None
    for b in businesses:
        if b[0] == business_id:
            business = b
            break

    if not business:
        await context.bot.send_message(chat_id=user_id, text="‚ùå –ë–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    id, name, price, income, description = business

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –±–∏–∑–Ω–µ—Å
    player_businesses = get_player_businesses(user_id)
    for pb_id, pb_name, pb_income, _ in player_businesses:
        if pb_id == business_id:
            await context.bot.send_message(chat_id=user_id, text="‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –±–∏–∑–Ω–µ—Å!")
            return

    if player[3] < price:
        await context.bot.send_message(chat_id=user_id, text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ YAIC!")
        return

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute('UPDATE players SET balance = balance - ? WHERE user_id = ?', (price, user_id))
        cursor.execute('INSERT INTO player_businesses (user_id, business_id) VALUES (?, ?)', (user_id, business_id))
        conn.commit()

        await context.bot.send_message(chat_id=user_id, text=f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ {name}!\nüìà +{income} YAIC/30–º–∏–Ω")
        await show_dashboard(query, context)
    except Exception as e:
        await context.bot.send_message(chat_id=user_id, text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±–∏–∑–Ω–µ—Å–∞")


# –†—ã–Ω–æ–∫ —è–∏—Ü
async def show_egg_market(query, context: ContextTypes.DEFAULT_TYPE):
    eggs = get_eggs()
    user_id = query.from_user.id
    player = get_player(user_id)
    balance = player[3] if player else 0

    text = f"ü•ö <b>–†—ã–Ω–æ–∫ —è–∏—Ü</b>\n\nüíµ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} YAIC\n\n"
    keyboard = []

    for egg in eggs:
        id, name, price, image_file_id, description, limit_count, current_count, base_price, last_restock = egg
        available = limit_count - current_count
        status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ" if available > 0 else "‚ùå –†–∞—Å–∫—É–ø–ª–µ–Ω–æ"

        price_increase = ((price - base_price) / base_price) * 100
        price_info = f" (+{price_increase:.1f}%)" if price > base_price else ""

        text += f"{status} {name}\n"
        text += f"   üí∞ –¶–µ–Ω–∞: {price} YAIC{price_info}\n"
        text += f"   üìä –î–æ—Å—Ç—É–ø–Ω–æ: {available}/{limit_count}\n\n"

        if available > 0:
            keyboard.append([InlineKeyboardButton(f"{name} - {price}YAIC", callback_data=f"egg_detail_{id}")])
        else:
            keyboard.append([InlineKeyboardButton(f"{name} - –†–∞—Å–∫—É–ø–ª–µ–Ω–æ", callback_data="sold_out")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dashboard")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(chat_id=query.from_user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def show_egg_details(query, context: ContextTypes.DEFAULT_TYPE, egg_id):
    eggs = get_eggs()
    egg = None
    for e in eggs:
        if e[0] == egg_id:
            egg = e
            break

    if not egg:
        await context.bot.send_message(chat_id=query.from_user.id, text="‚ùå –Ø–π—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    id, name, price, image_file_id, description, limit_count, current_count, base_price, last_restock = egg
    available = limit_count - current_count

    if image_file_id:
        await context.bot.send_photo(
            chat_id=query.from_user.id,
            photo=image_file_id,
            caption=f"<b>{name}</b>\n\nüí∞ <b>–¶–µ–Ω–∞:</b> {price} YAIC\nüìä <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> {available}/{limit_count}\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}",
            parse_mode='HTML'
        )
    else:
        text = f"<b>{name}</b>\n\nüí∞ <b>–¶–µ–Ω–∞:</b> {price} YAIC\nüìä <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> {available}/{limit_count}\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}"
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text=text,
            parse_mode='HTML'
        )

    if available > 0:
        keyboard = [
            [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_egg_{id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_market")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ —è–π—Ü–æ –≤ —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é?",
            reply_markup=reply_markup
        )
    else:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_market")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="‚ùå –≠—Ç–æ —è–π—Ü–æ —É–∂–µ —Ä–∞—Å–∫—É–ø–ª–µ–Ω–æ! –ñ–¥–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ.",
            reply_markup=reply_markup
        )


# –ò–ù–í–ï–ù–¢–ê–†–¨ –° –ö–ù–û–ü–ö–û–ô –°–ë–û–†–ê –î–û–•–û–î–ê
async def show_inventory_menu(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id

    text = "üéí <b>–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"

    keyboard = [
        [InlineKeyboardButton("ü•ö –ú–æ–∏ —è–π—Ü–∞", callback_data="inventory_eggs")],
        [InlineKeyboardButton("üè¢ –ú–æ–∏ –±–∏–∑–Ω–µ—Å—ã", callback_data="inventory_businesses")],
        [InlineKeyboardButton("üí∞ –°–æ–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥", callback_data="collect_income")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dashboard")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(chat_id=query.from_user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def collect_income_handler(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    income, status = collect_income(user_id)

    if status == "ready" and income > 0:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üí∞ <b>–í—ã —Å–æ–±—Ä–∞–ª–∏ –¥–æ—Ö–æ–¥: {income} YAIC!</b>\n‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç.",
            parse_mode='HTML'
        )
    elif status == "no_businesses":
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞!</b>\n\nüè¢ –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –±–∏–∑–Ω–µ—Å—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ.",
            parse_mode='HTML'
        )
    elif status.startswith("wait_"):
        minutes_remaining = status.split("_")[1]
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚è∞ <b>–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {minutes_remaining} –º–∏–Ω—É—Ç</b>\n\nüìà –î–æ—Ö–æ–¥ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç.",
            parse_mode='HTML'
        )
    else:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –ù–µ—Ç –¥–æ—Ö–æ–¥–∞ –¥–ª—è —Å–±–æ—Ä–∞."
        )

    await show_inventory_menu(query, context)


async def show_business_inventory(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    businesses = get_player_businesses(user_id)

    if not businesses:
        text = "‚ùå <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤</b>\n\nüè¢ –ù–∞—á–Ω–∏—Ç–µ —Å –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!"
    else:
        text = "üè¢ <b>–í–∞—à–∏ –±–∏–∑–Ω–µ—Å—ã</b>\n\n"
        total_income = 0

        for business_id, name, income, purchased_at in businesses:
            total_income += income
            text += f"{name}\n"
            text += f"   üìà –î–æ—Ö–æ–¥: {income} YAIC/30–º–∏–Ω\n"
            text += f"   üí∞ –ü—Ä–æ–¥–∞–∂–∞: {int(income * 10 * 0.7)} YAIC\n\n"

        text += f"üìä <b>–°—É–º–º–∞—Ä–Ω—ã–π –¥–æ—Ö–æ–¥:</b> {total_income} YAIC/30–º–∏–Ω\n\n"
        text += "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    keyboard = []
    if businesses:
        for business_id, name, income, _ in businesses:
            keyboard.append([InlineKeyboardButton(f"üí∞ –ü—Ä–æ–¥–∞—Ç—å {name}", callback_data=f"sell_business_{business_id}")])
            keyboard.append([InlineKeyboardButton(f"üîÑ –û–±–º–µ–Ω—è—Ç—å {name}", callback_data=f"trade_business_{business_id}")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_inventory")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(chat_id=query.from_user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def show_egg_inventory(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    eggs = get_player_eggs(user_id)

    if not eggs:
        text = "‚ùå <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —è–∏—Ü</b>\n\nü•ö –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ —è–π—Ü–∞ –Ω–∞ —Ä—ã–Ω–∫–µ!"
    else:
        text = "ü•ö <b>–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è —è–∏—Ü</b>\n\n"
        total_value = 0
        total_profit = 0

        for egg_id, name, current_price, image_file_id, count, purchased_price in eggs:
            purchased_price = purchased_price or current_price
            egg_value = current_price * count
            profit = (current_price - purchased_price) * count
            total_value += egg_value
            total_profit += profit

            profit_percent = ((current_price - purchased_price) / purchased_price) * 100 if purchased_price > 0 else 0

            text += f"<b>{name}</b>\n"
            text += f"   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price} YAIC\n"
            text += f"   üìà –ü—Ä–∏–±—ã–ª—å: {profit} YAIC ({profit_percent:+.1f}%)\n"
            text += f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}\n\n"

        text += f"<b>üíé –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {total_value} YAIC\n"
        text += f"<b>üìà –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:</b> {total_profit} YAIC\n\n"
        text += "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    keyboard = []
    if eggs:
        for egg_id, name, current_price, _, count, _ in eggs:
            if count > 0:
                keyboard.append([InlineKeyboardButton(f"üí∞ –ü—Ä–æ–¥–∞—Ç—å {name}", callback_data=f"sell_egg_{egg_id}")])
                keyboard.append([InlineKeyboardButton(f"üîÑ –û–±–º–µ–Ω—è—Ç—å {name}", callback_data=f"trade_egg_{egg_id}")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_inventory")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=query.from_user.id,
        text=text,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–¥–∞–∂–∏
async def sell_business_handler(query, context: ContextTypes.DEFAULT_TYPE, business_id):
    user_id = query.from_user.id
    sell_price = sell_business(user_id, business_id)

    if sell_price:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ <b>–ë–∏–∑–Ω–µ—Å –ø—Ä–æ–¥–∞–Ω –∑–∞ {sell_price} YAIC!</b>",
            parse_mode='HTML'
        )
    else:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –±–∏–∑–Ω–µ—Å–∞"
        )

    await show_business_inventory(query, context)


async def sell_egg_handler(query, context: ContextTypes.DEFAULT_TYPE, egg_id):
    user_id = query.from_user.id
    sell_price = sell_egg(user_id, egg_id)

    if sell_price:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ <b>–Ø–π—Ü–æ –ø—Ä–æ–¥–∞–Ω–æ –∑–∞ {sell_price} YAIC!</b>",
            parse_mode='HTML'
        )
    else:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ —è–π—Ü–∞"
        )

    await show_egg_inventory(query, context)


# –°–ò–°–¢–ï–ú–ê –î–†–£–ó–ï–ô
async def show_friends_menu(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    friends = get_friends(user_id)

    text = "üë• <b>–°–∏—Å—Ç–µ–º–∞ –¥—Ä—É–∑–µ–π</b>\n\n"

    if not friends:
        text += "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π.\n\nüë§ –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –∏—Ö ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
    else:
        text += "‚úÖ <b>–í–∞—à–∏ –¥—Ä—É–∑—å—è:</b>\n"
        for friend_id, nickname in friends:
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ None
            display_nickname = nickname if nickname else "–ë–µ–∑ –Ω–∏–∫–∞"
            text += f"{display_nickname} (ID: {friend_id})\n"

    text += "\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="add_friend")],
    ]

    if friends:
        for friend_id, nickname in friends:
            display_nickname = nickname if nickname else "–ë–µ–∑ –Ω–∏–∫–∞"
            keyboard.append(
                [InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {display_nickname}", callback_data=f"remove_friend_{friend_id}")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dashboard")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(chat_id=query.from_user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def add_friend_handler(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    context.user_data['awaiting_friend_id'] = True

    text = """üë• <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞</b>

–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞, –≤–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –µ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –¥—Ä—É–≥–∞:
1. –ù–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @userinfobot
2. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã –∏–∑ –ø–æ–ª—è "Id"
3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–∏ —Ü–∏—Ñ—Ä—ã –≤–∞–º

–ó–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ ID –¥—Ä—É–≥–∞:"""

    await context.bot.send_message(chat_id=user_id, text=text, parse_mode='HTML')


async def remove_friend_handler(query, context: ContextTypes.DEFAULT_TYPE, friend_id):
    user_id = query.from_user.id
    remove_friend(user_id, friend_id)
    await context.bot.send_message(chat_id=user_id, text="‚úÖ –î—Ä—É–≥ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞!")
    await show_friends_menu(query, context)


# –°–ò–°–¢–ï–ú–ê –¢–†–ï–ô–î–û–í
async def show_trades_menu(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    pending_trades = get_pending_trades(user_id)

    text = "üîÑ <b>–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–π–¥–æ–≤</b>\n\n"

    if not pending_trades:
        text += "üòî –£ –≤–∞—Å –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–µ–π–¥–æ–≤\n\n"
    else:
        text += "‚è≥ <b>–û–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–µ–π–¥—ã:</b>\n"
        for trade_id, from_user_id, to_user_id, item_type, item_id, price, nickname, item_name in pending_trades:
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ None
            display_nickname = nickname if nickname else "–ë–µ–∑ –Ω–∏–∫–∞"
            text += f"{display_nickname} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç {item_name} –∑–∞ {price} YAIC\n"
        text += "\n"

    text += "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    keyboard = []
    if pending_trades:
        for trade_id, from_user_id, to_user_id, item_type, item_id, price, nickname, item_name in pending_trades:
            display_nickname = nickname if nickname else "–ë–µ–∑ –Ω–∏–∫–∞"
            keyboard.append([InlineKeyboardButton(f"‚úÖ –ü—Ä–∏–Ω—è—Ç—å {item_name} –∑–∞ {price}YAIC",
                                                  callback_data=f"accept_trade_{trade_id}")])
            keyboard.append(
                [InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {item_name}", callback_data=f"reject_trade_{trade_id}")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dashboard")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(chat_id=query.from_user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def create_business_trade_handler(query, context: ContextTypes.DEFAULT_TYPE, business_id):
    user_id = query.from_user.id
    context.user_data['trade_item_type'] = 'business'
    context.user_data['trade_item_id'] = business_id

    friends = get_friends(user_id)
    if not friends:
        await context.bot.send_message(chat_id=user_id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥—Ä—É–∑–µ–π –¥–ª—è –æ–±–º–µ–Ω–∞!")
        return

    keyboard = []
    for friend_id, nickname in friends:
        display_nickname = nickname if nickname else "–ë–µ–∑ –Ω–∏–∫–∞"
        keyboard.append([InlineKeyboardButton(f"{display_nickname}", callback_data=f"select_friend_{friend_id}")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="inventory_businesses")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=user_id,
        text="üë• –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∞ –¥–ª—è –æ–±–º–µ–Ω–∞:",
        reply_markup=reply_markup
    )


async def create_egg_trade_handler(query, context: ContextTypes.DEFAULT_TYPE, egg_id):
    user_id = query.from_user.id
    context.user_data['trade_item_type'] = 'egg'
    context.user_data['trade_item_id'] = egg_id

    friends = get_friends(user_id)
    if not friends:
        await context.bot.send_message(chat_id=user_id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥—Ä—É–∑–µ–π –¥–ª—è –æ–±–º–µ–Ω–∞!")
        return

    keyboard = []
    for friend_id, nickname in friends:
        display_nickname = nickname if nickname else "–ë–µ–∑ –Ω–∏–∫–∞"
        keyboard.append([InlineKeyboardButton(f"{display_nickname}", callback_data=f"select_friend_{friend_id}")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="inventory_eggs")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=user_id,
        text="üë• –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∞ –¥–ª—è –æ–±–º–µ–Ω–∞:",
        reply_markup=reply_markup
    )


# –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –í–´–ë–û–†–ê –î–†–£–ì–ê
async def select_friend_handler(query, context: ContextTypes.DEFAULT_TYPE, friend_id):
    user_id = query.from_user.id
    context.user_data['trade_friend_id'] = friend_id
    context.user_data['awaiting_trade_price'] = True

    item_type = context.user_data['trade_item_type']
    item_id = context.user_data['trade_item_id']

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
    if item_type == 'business':
        businesses = get_businesses()
        item_name = None
        for business in businesses:
            if business[0] == item_id:
                item_name = business[1]
                break
    else:  # egg
        eggs = get_eggs()
        item_name = None
        for egg in eggs:
            if egg[0] == item_id:
                item_name = egg[1]
                break

    await context.bot.send_message(
        chat_id=user_id,
        text=f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ YAIC –¥–ª—è {item_name}:\n\n(–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: 1 YAIC)"
    )


async def accept_trade_handler(query, context: ContextTypes.DEFAULT_TYPE, trade_id):
    user_id = query.from_user.id

    if accept_trade(trade_id):
        await context.bot.send_message(chat_id=user_id, text="‚úÖ –¢—Ä–µ–π–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    else:
        await context.bot.send_message(chat_id=user_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–π–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å.")

    await show_trades_menu(query, context)


async def reject_trade_handler(query, context: ContextTypes.DEFAULT_TYPE, trade_id):
    user_id = query.from_user.id
    reject_trade(trade_id)
    await context.bot.send_message(chat_id=user_id, text="‚ùå –¢—Ä–µ–π–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω!")
    await show_trades_menu(query, context)


# –°–ò–°–¢–ï–ú–ê –ë–û–ö–°–û–í - –° –ü–û–ù–ò–ñ–ï–ù–ù–û–ô –í–ï–ó–£–ß–ï–°–¢–¨–Æ
async def show_boxes_menu(query, context: ContextTypes.DEFAULT_TYPE):
    boxes = get_boxes()
    user_id = query.from_user.id
    player = get_player(user_id)
    balance = player[3] if player else 0

    text = f"üì¶ <b>–°–∏—Å—Ç–µ–º–∞ –±–æ–∫—Å–æ–≤</b>\n\nüíµ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} YAIC\n\n"

    for box in boxes:
        box_id, name, price, rewards = box
        text += f"{name}\n"
        text += f"   üí∞ –¶–µ–Ω–∞: {price} YAIC\n"
        text += f"   üéÅ –í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã: {rewards}\n\n"

    text += "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –±–æ–∫—Å –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:"

    keyboard = []
    for box in boxes:
        box_id, name, price, _ = box
        keyboard.append([InlineKeyboardButton(f"{name} - {price}YAIC", callback_data=f"open_box_{box_id}")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dashboard")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(chat_id=query.from_user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


# –°–ò–°–¢–ï–ú–ê –ö–†–ï–î–ò–¢–û–í
async def show_loans_menu(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    loan_info = get_loan_info(user_id)
    player = get_player(user_id)
    balance = player[3] if player else 0

    text = f"üí∞ <b>–°–∏—Å—Ç–µ–º–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤</b>\n\nüíµ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} YAIC\n\n"

    if loan_info['has_loan']:
        text += f"üìä <b>–¢–µ–∫—É—â–∏–π –∫—Ä–µ–¥–∏—Ç:</b>\n"
        text += f"   üí∞ –°—É–º–º–∞: {loan_info['amount']} YAIC\n"
        text += f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç: {loan_info['interest_rate']}%\n"
        text += f"   ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–ª–∞—Ç–∏—Ç—å: {loan_info['remaining']} YAIC\n\n"
        text += "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        keyboard = [
            [InlineKeyboardButton("üíµ –í–Ω–µ—Å—Ç–∏ 1,000 YAIC", callback_data="repay_loan_1000")],
            [InlineKeyboardButton("üíµ –í–Ω–µ—Å—Ç–∏ 5,000 YAIC", callback_data="repay_loan_5000")],
            [InlineKeyboardButton("üíµ –í–Ω–µ—Å—Ç–∏ 10,000 YAIC", callback_data="repay_loan_10000")],
            [InlineKeyboardButton("üíµ –í–Ω–µ—Å—Ç–∏ –≤—Å—é —Å—É–º–º—É", callback_data=f"repay_loan_{loan_info['remaining']}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dashboard")]
        ]
    else:
        text += "üí≥ –í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç –ø–æ–¥ 20% –≥–æ–¥–æ–≤—ã—Ö\n\n"
        text += "üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 50,000 YAIC\n"
        text += "üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1,000 YAIC\n\n"
        text += "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞:"

        keyboard = [
            [InlineKeyboardButton("üíµ –í–∑—è—Ç—å 5,000 YAIC", callback_data="take_loan_5000")],
            [InlineKeyboardButton("üíµ –í–∑—è—Ç—å 10,000 YAIC", callback_data="take_loan_10000")],
            [InlineKeyboardButton("üíµ –í–∑—è—Ç—å 25,000 YAIC", callback_data="take_loan_25000")],
            [InlineKeyboardButton("üíµ –í–∑—è—Ç—å 50,000 YAIC", callback_data="take_loan_50000")],
            [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—É–º–º—É", callback_data="custom_loan")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dashboard")]
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(chat_id=query.from_user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def take_loan_handler(query, context: ContextTypes.DEFAULT_TYPE, amount):
    user_id = query.from_user.id
    success, message = take_loan(user_id, amount)
    await context.bot.send_message(chat_id=user_id, text=message)
    await show_loans_menu(query, context)


async def repay_loan_handler(query, context: ContextTypes.DEFAULT_TYPE, amount):
    user_id = query.from_user.id
    success, message = repay_loan(user_id, amount)
    await context.bot.send_message(chat_id=user_id, text=message)
    await show_loans_menu(query, context)


# –°–ò–°–¢–ï–ú–ê –ü–†–û–ú–û–ö–û–î–û–í
async def show_promo_codes_menu(query, context: ContextTypes.DEFAULT_TYPE):
    user_id = query.from_user.id
    active_codes = get_active_codes()

    text = "üé´ <b>–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>\n\n"

    if active_codes:
        text += "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã:</b>\n"
        for code, reward_type, reward_value, reward_item, uses_left, expires_at in active_codes:
            expires_date = datetime.fromisoformat(expires_at).strftime("%d.%m.%Y")
            if reward_type == 'yaic':
                reward_text = f"{reward_value} YAIC"
            else:
                reward_text = reward_item
            text += f"üéÅ <b>{code}</b> - {reward_text} (–æ—Å—Ç–∞–ª–æ—Å—å: {uses_left}, –¥–æ: {expires_date})\n"
        text += "\n"

    text += "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    keyboard = [
        [InlineKeyboardButton("üé´ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promo_code")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dashboard")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(chat_id=query.from_user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


async def enter_promo_code_handler(query, context: ContextTypes.DEFAULT_TYPE):
    await ask_promo_code(query, context)


# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
async def show_instructions(query, context: ContextTypes.DEFAULT_TYPE):
    text = """
üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏–≥—Ä–µ "–Ø–π—Ü–∞ –ë–∏–∑–Ω–µ—Å"</b>

üéÆ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>
1. –ù–∞–∂–º–∏ "üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
2. –ü—Ä–∏–¥—É–º–∞–π –Ω–∏–∫
3. –ù–∞—á–Ω–∏ –ø–æ–∫—É–ø–∞—Ç—å –±–∏–∑–Ω–µ—Å—ã

üè¢ <b>–ë–∏–∑–Ω–µ—Å—ã:</b>
- –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ 1 —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–∂–¥–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞
- –ü—Ä–∏–Ω–æ—Å—è—Ç –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
- –î–æ—Ö–æ–¥ –≤ –≤–∞–ª—é—Ç–µ YAIC
- –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –∑–∞ 70% –æ—Ç —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏

ü•ö <b>–Ø–π—Ü–∞ —Ö–∞–π–ø–∞:</b>
- 4 —Ç–∏–ø–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —è–∏—Ü —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
- –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ —Ü–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç –Ω–∞ 8%
- –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —Ç–∏—Ä–∞–∂ –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è
- –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –∑–∞ 80% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã

üë• <b>–°–∏—Å—Ç–µ–º–∞ –¥—Ä—É–∑–µ–π:</b>
- –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ ID
- –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ—Å—å —è–π—Ü–∞–º–∏ –∏ –±–∏–∑–Ω–µ—Å–∞–º–∏

üîÑ <b>–¢—Ä–µ–π–¥—ã:</b>
- –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –¥—Ä—É–∑—å—è–º –æ–±–º–µ–Ω
- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ —Å–≤–æ—é —Ü–µ–Ω—É
- –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

üì¶ <b>–ë–æ–∫—Å—ã:</b>
- –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∑–∞ YAIC
- –°–ª—É—á–∞–π–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã (YAIC, —è–π—Ü–∞)
- –†–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –±–æ–∫—Å–æ–≤
- –ö—É–ª–¥–∞—É–Ω 2 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É –æ—Ç–∫—Ä—ã—Ç–∏—è–º–∏

üí∞ <b>–ö—Ä–µ–¥–∏—Ç—ã:</b>
- –ë–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–¥ 20%
- –ú–∞–∫—Å–∏–º—É–º 50,000 YAIC
- –í—ã–ø–ª–∞—á–∏–≤–∞–π—Ç–µ –≤–æ–≤—Ä–µ–º—è

üé´ <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã:</b>
- –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∫–∞–Ω–∞–ª–æ–º —Å –∞–Ω–æ–Ω—Å–∞–º–∏
- –í–≤–æ–¥–∏—Ç–µ –∫–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥
- –ö–æ–¥—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π

‚è∞ <b>–°–±–æ—Ä –¥–æ—Ö–æ–¥–∞:</b>
- –î–æ—Ö–æ–¥ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
- –°–æ–±–∏—Ä–∞–π—Ç–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
- –ï—Å–ª–∏ 30 –º–∏–Ω—É—Ç –Ω–µ –ø—Ä–æ—à–ª–æ - –ø–æ–∫–∞–∂–µ—Ç —Ç–∞–π–º–µ—Ä

üöÄ <b>–£–¥–∞—á–∏ –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å-–∏–º–ø–µ—Ä–∏–∏!</b>
    """

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dashboard")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(chat_id=query.from_user.id, text=text, reply_markup=reply_markup, parse_mode='HTML')


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_db()

    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("give_yaic", admin_give_yaic))
    application.add_handler(CommandHandler("create_code", admin_create_code))
    application.add_handler(CommandHandler("fix_nicks", fix_nicknames))
    application.add_handler(CommandHandler("upload_images", upload_images))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("üéÆ –ë–æ—Ç '–Ø–π—Ü–∞ –ë–∏–∑–Ω–µ—Å' –∑–∞–ø—É—â–µ–Ω!")
    print("üíµ –í–∞–ª—é—Ç–∞: YAIC")
    print("üè¢ –ë–∏–∑–Ω–µ—Å—ã: –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ 1 —ç–∫–∑–µ–º–ø–ª—è—Ä")
    print("ü•ö 4 —Ç–∏–ø–∞ —è–∏—Ü: –û–±—ã—á–Ω–æ–µ, –ó–æ–ª–æ—Ç–æ–µ, –ê–ª–º–∞–∑–Ω–æ–µ, –ú–µ–º–Ω–æ–µ")
    print("üì¶ –ë–æ–∫—Å—ã —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–π –≤–µ–∑—É—á–µ—Å—Ç—å—é –∏ –∫—É–ª–¥–∞—É–Ω–æ–º 2 –º–∏–Ω—É—Ç—ã")
    print("‚è∞ –¢–∞–π–º–µ—Ä —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞: 30 –º–∏–Ω—É—Ç")
    print("üí∞ –°–∏—Å—Ç–µ–º–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–¥ 20%")
    print("üîÑ –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–π–¥–æ–≤")
    print("üé´ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
    print("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    print("üîß –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∏–∫–æ–≤: /fix_nicks")

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()


if __name__ == '__main__':
    main()